/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package practica5;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author ivan
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moverCB = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        moverCB.setText("Mover");
        moverCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moverCBStateChanged(evt);
            }
        });
        getContentPane().add(moverCB, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        vectorShape.add(lineaClick = new Line2D.Double(evt.getPoint(),evt.getPoint()));
        if(seleccionar){
            this.setPos(this.getShapeSelected(evt.getPoint()),evt.getPoint());
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        
        lineaClick.setLine(lineaClick.getP1(), evt.getPoint());
        
        this.paint(this.getGraphics());
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

    }//GEN-LAST:event_formMouseReleased

    private void moverCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_moverCBStateChanged
        if(moverCB.isSelected()){
            this.seleccionar = true;
        }
    }//GEN-LAST:event_moverCBStateChanged
    
    int lineasDibujadas=0;
    Line2D.Double lineaClick = new Line2D.Double();
    List<Shape> vectorShape = new ArrayList();
    boolean seleccionar = false;
    
    public boolean cerca(Line2D linea, Point punto){
        return(linea.ptLineDist(punto)>2.0);
    }
    public Line2D getShapeSelected(Point punto){
        for(int i = 0; i < this.vectorShape.size(); i++){
                if(this.cerca((Line2D) this.vectorShape.get(i), (Point) punto)){
                    return (Line2D) this.vectorShape.get(i);
                }
            }
        return null;
    }
    public void setPos(Line2D linea, Point punto){
        double dx = punto.getX() - linea.getX1();
        double dy = punto.getY() - linea.getY1();
        Point2D nuevoP = new Point2D.Double(linea.getX2()+dx,linea.getY2()+dy);
        linea.setLine(punto, nuevoP);
    }
    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        /*-------MODIFICACION DE SHAPE------*/
        //Stroke
        Stroke sk = new BasicStroke(10.0f);
        g2d.setStroke(sk);
        //Paint
        Paint colorp = new Color(255,100,255);
        g2d.setPaint(colorp);

        /*-------------PUNTOS-------------*/
        Point2D.Double p = new Point.Double(50,50);
        Point2D.Double q = new Point.Double(100,100);
        Point2D.Double r = new Point.Double(150,50);
        /*-------------LINEA-------------*/
        Line2D.Double l = new Line2D.Double(p,q);
        if(p != null)
            g2d.draw(l);
        /*-------------CURVA CUADRÁTICA-------------*/
        QuadCurve2D curve = new QuadCurve2D.Double();
        curve.setCurve(p.x, p.y, q.x, q.y, r.x, r.y);
        if(p != null)
            g2d.draw(curve);
        /*-------------CURVA CÚBICA-------------*/
        CubicCurve2D c = new CubicCurve2D.Double();
        c.setCurve(r.x, r.y, q.x,q.y, 200, 200, 50, 300);
        if(p != null)
            g2d.draw(c);
        /*-------------RECTANGULO-------------*/
        Rectangle2D rectan =new Rectangle2D.Double(200, 100,50,50);
        if(p != null)
            g2d.draw(rectan);
        /*-------------RECTANGULO CURVADO-------------*/
        RoundRectangle2D rectanC =new RoundRectangle2D.Double(280,100,50,50,20,20);
        if(p != null)
            g2d.draw(rectanC);
        /*-------------ELIPSE-------------*/
        Ellipse2D elipse = new Ellipse2D.Double(350, 100,50,30);
        if(p != null)
            g2d.draw(elipse);
        /*-------------ARCO-------------*/
        Arc2D arco = new Arc2D.Double(420,100,60,60,90,135,Arc2D.OPEN);
        if(p != null)
            g2d.draw(arco);
        /*-------------POLILINEA-------------*/
        int x2Points[] = {200, 300, 200, 300};
        int y2Points[] = {200, 250, 250, 200};
        GeneralPath polyline = new GeneralPath(GeneralPath.WIND_EVEN_ODD, x2Points.length);
        polyline.moveTo (x2Points[0], y2Points[0]);
        for (int index = 1; index < x2Points.length; index++) {
            polyline.lineTo(x2Points[index], y2Points[index]);
        }
        polyline.closePath();
        /*-------------Vector de lineas-------------*/
        if(p != null)
            g2d.draw(polyline);
        if(!vectorShape.isEmpty())
            for(int i = 0; i < vectorShape.size(); i++)
                if(p != null)
                    g2d.draw((Shape) this.vectorShape.get(i));
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox moverCB;
    // End of variables declaration//GEN-END:variables
}
